idx = base::sample(nrow(longley),nrow(longley)*0.7)
train_longley = createDataFrame(longley[idx,-6])
test_longley = createDataFrame(longley[-idx,-6])
head(train_longley)

model <- spark.randomForest(train_longley, Employed ~ ., "regression", maxDepth = 5, maxBins = 16, numTrees = 3)
summary_rf = summary(model)
summary_rf$

#randomforest classification  


idx = base::sample(nrow(infert),nrow(infert)*0.7)
train_infert = createDataFrame(infert[idx,])
test_infert = createDataFrame(infert[-idx,])
head(train_infert)
  
model <- spark.randomForest(infert_train, case~ age+parity+induced+spontaneous, "classification",numTrees = 3)
summary(model)

infert_rf_cla_model <- spark.randomForest(train_infert, case ~ age+parity+induced+spontaneous, "classification", maxDepth = 5, maxBins = 16, seed=123)

summary(model)


libsvmdata = read.df("dataset/sample_libsvm_data.txt","libsvm")
head(libsvmdata)
model <- spark.randomForest(libsvmdata,label ~ features, "classification",numTrees = 10)
summary(model)
head(predict(model,libsvmdata))
